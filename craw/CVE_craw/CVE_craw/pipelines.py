# -*- coding: utf-8 -*-

# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html

import os

'''
1.数据是异步请求的，所以一个cveid如果存在多条满足要求的参考链接，比如存在edb、securityfocus，则都保留
一个cveid的report原本的txt内容（即所有item的各项键值）可能为：
---文本内容开始---
cve_link:xxx
cve_id:xxx
cve_description:xxx
edb_link:xxx
edb_title:xxx
edb_description:xxx
（又紧跟着下面的数据）
cve_link:xxx
cve_id:xxx
cve_description:xxx
edb_link:xxx
edb_title:xxx
edb_description:xxx
securityfocus_link:xxx
securityfocus_title:xxx
securityfocus_description:xxx
---文本内容结束---

2.一个cveid如果存在多条来自相同网站的参考链接，比如都来自edb，那么这两条信息都需要保留
一个cveid的report原本的txt内容可能为：
---文本内容开始---
cve_link:xxx
cve_id:xxx
cve_description:xxx
edb_link:xxx1
edb_title:xxx1
edb_description:xxx1
（又紧跟着下面的数据）
cve_link:xxx
cve_id:xxx
cve_description:xxx
edb_link:xxx2（另外一个edb_link，与上面的不同）
edb_title:xxx2
edb_description:xxx2
---文本内容结束---
'''


class CveCrawPipeline(object):
    # 存储参考链接的信息
    def store_report(self, website, item, cve_report_path):
        # 创建CVEID/site
        site_path = os.path.join(cve_report_path, item['cve_id'], website)
        if not os.path.exists(site_path):
            os.makedirs(site_path)

        # 不要爬取相同的site
        site_exists_flag = 0
        site_files = os.listdir(site_path)
        for site_file in site_files:
            site_link_file = os.path.join(site_path, site_file, 'link.txt')
            if os.path.isfile(site_link_file):  # 存在某文件
                with open(site_link_file, 'r', encoding='utf-8') as site_link_r:
                    if item[website+'_link'] == site_link_r.read():
                        site_exists_flag = 1
                        break

        if site_exists_flag == 0:
            # 可能一个cveid有多个来自同一域名site的网页，第一个网页内容保存到文件夹1中
            site_num = 1 + len([lists for lists in os.listdir(site_path) if os.path.isdir(os.path.join(site_path, lists))])  # 1+子目录数
            site_num = str(site_num)
            site_cnt_path = os.path.join(cve_report_path, item['cve_id'], website, site_num)
            if not os.path.exists(site_cnt_path):
                os.makedirs(site_cnt_path)
                # 创建CVEID/site/site_num/link.txt
                site_link_path = os.path.join(cve_report_path, item['cve_id'], website, site_num, 'link.txt')
                with open(site_link_path, 'w', encoding='utf-8') as site_link_f:
                    site_link_f.write(item[website+'_link'])
                # 创建CVEID/site/site_num/title.txt
                site_title_path = os.path.join(cve_report_path, item['cve_id'], website, site_num, 'title.txt')
                with open(site_title_path, 'w', encoding='utf-8') as site_title_f:
                    site_title_f.write(item[website+'_title'])
                    # 创建CVEID/site/site_num/description.txt
                    site_description_path = os.path.join(cve_report_path, item['cve_id'], website, site_num, 'description.txt')
                with open(site_description_path, 'w', encoding='utf-8') as site_description_f:
                    site_description_f.write(item[website+'_description'])


    def process_item(self, item, spider):  # item为cve_spider.py的 yield的cve_craw_item
        # 记录可能包括s2r、eb的CVE编号文件列表
        cve_id_path = os.getcwd() + '/data/cveid/'  # 存放cve_id的文件夹
        cve_id_filename = os.listdir(cve_id_path)[0]
        mays2r_path = os.getcwd() + '/data/s2r_info/'  # 存放s2r_info的文件夹
        mays2r_dir = 's2rinfo_' + cve_id_filename
        mays2r_file_path = os.path.join('%s\%s' % (mays2r_path, mays2r_dir))
        mays2r_flag = 0  # 默认不存在可能包括s2r的cveid

        # 存储CVE官网信息
        cve_report_path = os.getcwd() + '/data/report_by_kind'  # 存放cve_report的文件夹
        if not os.path.exists(os.path.join(cve_report_path, item['cve_id'])):  # 创建CVEID命名的文件夹
            os.makedirs(os.path.join(cve_report_path, item['cve_id']))
        # 创建CVEID/cve
        cve_path = os.path.join(cve_report_path, item['cve_id'], 'cve')
        if not os.path.exists(cve_path):
            os.makedirs(cve_path)
        # 创建CVEID/cve/link.txt
        cve_link_path = os.path.join(cve_report_path, item['cve_id'], 'cve', 'link.txt')
        with open(cve_link_path, 'w', encoding='utf-8') as cve_link_f:
            cve_link_f.write(item['cve_link'])
        # 创建CVEID/cve/id.txt
        cve_id_path = os.path.join(cve_report_path, item['cve_id'], 'cve', 'id.txt')
        with open(cve_id_path, 'w', encoding='utf-8') as cve_id_f:
            cve_id_f.write(item['cve_id'])
        # 创建CVEID/cve/description.txt
        cve_description_path = os.path.join(cve_report_path, item['cve_id'], 'cve', 'description.txt')
        with open(cve_description_path, 'w', encoding='utf-8') as cve_description_f:
            cve_description_f.write(item['cve_description'])

        # 存储bugsgentoo信息
        if item['bugsgentoo_link'] != '':
            mays2r_flag = 1  # 可能存在s2r
            self.store_report('bugsgentoo', item, cve_report_path)  # 调用存储信息函数

        # 存储edb信息
        if item['edb_link'] != '':
            mays2r_flag = 1  # 可能存在s2r
            self.store_report('edb', item, cve_report_path)  # 调用存储信息函数

        # 存储marcinfo信息
        if item['marcinfo_link'] != '':
            mays2r_flag = 1  # 可能存在s2r
            self.store_report('marcinfo', item, cve_report_path)  # 调用存储信息函数

        # 存储seclists信息
        if item['seclists_link'] != '':
            mays2r_flag = 1  # 可能存在s2r
            self.store_report('seclists', item, cve_report_path)  # 调用存储信息函数

        # 存储securesoftware信息
        if item['securesoftware_link'] != '':
            mays2r_flag = 1  # 可能存在s2r
            self.store_report('securesoftware', item, cve_report_path)  # 调用存储信息函数

        # 存储securityfocus信息
        if item['securityfocus_link'] != '':
            mays2r_flag = 1  # 可能存在s2r
            self.store_report('securityfocus', item, cve_report_path)  # 调用存储信息函数

        # 存储securitytracker信息
        if item['securitytracker_link'] != '':
            mays2r_flag = 1  # 可能存在s2r
            self.store_report('securitytracker', item, cve_report_path)  # 调用存储信息函数

        # 存储sourceware信息
        if item['sourceware_link'] != '':
            mays2r_flag = 1  # 可能存在s2r
            self.store_report('sourceware', item, cve_report_path)  # 调用存储信息函数

        # 异步捕获数据，所以可能txt中已经存在将要保存的mays2r的cveid
        mays2r_cveid_exists_flag = 0
        if mays2r_flag:
            with open(mays2r_file_path, 'r', encoding='utf-8') as mays2rf:
                if mays2rf.read().find(item['cve_id']) >= 0:  # 异步捕获数据，所以可能txt中已经存在该信息
                    mays2r_cveid_exists_flag = 1
            if mays2r_cveid_exists_flag == 0:
                with open(mays2r_file_path, 'a', encoding='utf-8') as mays2rf:  # 用a而非w，用于追加
                    mays2rf.write(item['cve_id'] + '\n')  # 记录可能包括S2R的CVEID
        return item



